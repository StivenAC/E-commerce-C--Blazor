@page "/usuarios"

@inject IUsuarioServicio usuarioServicio
@inject IToastService toastService
@inject SweetAlertService Swal

@attribute [Authorize(Roles = "Administrador")]

<div class="row justify-content-center mt-3">
    <div class="col-sm-6 col-md-4 col-xl-3 mb-4">
        <div class="d-grid gap-1 col-12 mx-auto">
            <a class="btn btn-primary" href="/usuario">Nuevo usuario</a>
        </div>
    </div>
    <div class="col-sm-6 col-md-8 col-xl-9 mb-4">
        <div class="input-group mb-3">
            <input type="text" class="form-control" placeholder="Buscar usuario..." @bind-value="buscar">
            <button class="btn btn-primary" type="button" @onclick="(async()=> await ObtenerUsuarios(buscar))">
                <i class="bi bi-search"></i> 
            </button>
        </div>
    </div>
</div>
<style>
    body {
        background-image: url('/images/bareta.jpg'); /* Ruta desde la raíz del servidor */
        background-size: cover; /* Hace que la imagen cubra toda el área del fondo */
        background-position: center; /* Centra la imagen */
        background-attachment: fixed; /* Hace que la imagen no se mueva al hacer scroll */
        margin: 0;
        padding: 0;
        height: 100vh; /* Asegura que el fondo cubra toda la altura de la ventana */
    }

    .card {
        border: 2px solid #4a6f58; /* Borde verde oscuro */
    }

    .btn-primary {
        background-color: #d28eff;
        border-color: #d28eff;
    }

    a {
        color: #6a0dad;
        text-decoration: none;
    }

    .btn-primary:hover {
        background-color: #6a0dad;
        color: white
    }
</style>
<div class="row gx-4 row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-xl-4 justify-content-start mt-2">

    @if (lista != null)
    {
        foreach (var item in lista)
        {
            <div class="col mb-5">
                <div class="card h-100">
                    <div class="card-body p-4">
                        <div class="text-center">
                            <i class="bi bi-person-circle" style="font-size:50px"></i> <!-- Ícono de persona -->
                        </div>
                        <div class="text-start">
                            <p class="m-1"><b>Nombre: </b>@item.NombreCompleto</p>
                            <p class="m-1"><b>Correo: </b>@item.Correo</p>
                        </div>
                    </div>
                    <div class="card-footer bg-transparent">
                        <div class="row justify-content-between">
                            <a class="col-5 btn btn-sm btn-outline-primary mt-auto" href="/usuario/@item.IdUsuario">
                                Editar <!-- Reemplazado el ícono de lápiz por la palabra "Editar" -->
                            </a>
                            <button class="col-5 btn btn-sm btn-outline-danger mt-auto" type="button" @onclick="(async () => await Eliminar(item))">
                                Eliminar <!-- Reemplazado el ícono de basurero por la palabra "Eliminar" -->
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    }

</div>

@code {
    private List<UsuarioDTO>? lista = null;
    private string buscar = "";

    private async Task ObtenerUsuarios(string Valor = "")
    {
        var response = await usuarioServicio.Lista("Administrador", Valor);
        if (response.EsCorrecto)
        {
            lista = (List<UsuarioDTO>)response.Resultado!;
        }
        else
        {
            lista = new List<UsuarioDTO>();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await ObtenerUsuarios();
    }

    private async Task Eliminar(UsuarioDTO modelo)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Estás seguro?",
                Text = $"Eliminar usuario: {modelo.NombreCompleto}",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Sí, eliminar",
                CancelButtonText = "No, volver"
            });

        if (result.IsConfirmed)
        {
            var response = await usuarioServicio.Eliminar(modelo.IdUsuario);
            if (response.EsCorrecto)
            {
                await ObtenerUsuarios();
                toastService.ShowSuccess("Usuario fue eliminado");
            }
            else
            {
                toastService.ShowWarning(response.Mensaje);
            }
        }
    }
}
